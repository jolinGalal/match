// Code generated by goa v3.5.2, DO NOT EDIT.
//
// match HTTP client CLI support package
//
// Command:
// $ goa gen github.com/jolinGalal/match/internal/purchase/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	purchasesc "github.com/jolinGalal/match/internal/purchase/gen/http/purchases/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `purchases (deposit|buy|reset)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` purchases deposit --body '{
      "deposit": 5
   }' --id 748655918013700853 --token "Magni quos omnis consequuntur cupiditate nesciunt nihil."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		purchasesFlags = flag.NewFlagSet("purchases", flag.ContinueOnError)

		purchasesDepositFlags     = flag.NewFlagSet("deposit", flag.ExitOnError)
		purchasesDepositBodyFlag  = purchasesDepositFlags.String("body", "REQUIRED", "")
		purchasesDepositIDFlag    = purchasesDepositFlags.String("id", "REQUIRED", "the user id ")
		purchasesDepositTokenFlag = purchasesDepositFlags.String("token", "REQUIRED", "")

		purchasesBuyFlags     = flag.NewFlagSet("buy", flag.ExitOnError)
		purchasesBuyBodyFlag  = purchasesBuyFlags.String("body", "REQUIRED", "")
		purchasesBuyIDFlag    = purchasesBuyFlags.String("id", "REQUIRED", "the user id ")
		purchasesBuyTokenFlag = purchasesBuyFlags.String("token", "REQUIRED", "")

		purchasesResetFlags     = flag.NewFlagSet("reset", flag.ExitOnError)
		purchasesResetIDFlag    = purchasesResetFlags.String("id", "REQUIRED", "the user id ")
		purchasesResetTokenFlag = purchasesResetFlags.String("token", "REQUIRED", "")
	)
	purchasesFlags.Usage = purchasesUsage
	purchasesDepositFlags.Usage = purchasesDepositUsage
	purchasesBuyFlags.Usage = purchasesBuyUsage
	purchasesResetFlags.Usage = purchasesResetUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "purchases":
			svcf = purchasesFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "purchases":
			switch epn {
			case "deposit":
				epf = purchasesDepositFlags

			case "buy":
				epf = purchasesBuyFlags

			case "reset":
				epf = purchasesResetFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "purchases":
			c := purchasesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "deposit":
				endpoint = c.Deposit()
				data, err = purchasesc.BuildDepositPayload(*purchasesDepositBodyFlag, *purchasesDepositIDFlag, *purchasesDepositTokenFlag)
			case "buy":
				endpoint = c.Buy()
				data, err = purchasesc.BuildBuyPayload(*purchasesBuyBodyFlag, *purchasesBuyIDFlag, *purchasesBuyTokenFlag)
			case "reset":
				endpoint = c.Reset()
				data, err = purchasesc.BuildResetPayload(*purchasesResetIDFlag, *purchasesResetTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// purchasesUsage displays the usage of the purchases command and its
// subcommands.
func purchasesUsage() {
	fmt.Fprintf(os.Stderr, `The events service exposes endpoints that require valid jwt token.
Usage:
    %[1]s [globalflags] purchases COMMAND [flags]

COMMAND:
    deposit: Create new purchase
    buy: update existing purchase
    reset: reset deposit

Additional help:
    %[1]s purchases COMMAND --help
`, os.Args[0])
}
func purchasesDepositUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] purchases deposit -body JSON -id INT64 -token STRING

Create new purchase
    -body JSON: 
    -id INT64: the user id 
    -token STRING: 

Example:
    %[1]s purchases deposit --body '{
      "deposit": 5
   }' --id 748655918013700853 --token "Magni quos omnis consequuntur cupiditate nesciunt nihil."
`, os.Args[0])
}

func purchasesBuyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] purchases buy -body JSON -id INT64 -token STRING

update existing purchase
    -body JSON: 
    -id INT64: the user id 
    -token STRING: 

Example:
    %[1]s purchases buy --body '{
      "purchase": [
         {
            "productID": 7749138134878224859,
            "purductAmount": 6051214521179394048
         },
         {
            "productID": 7749138134878224859,
            "purductAmount": 6051214521179394048
         },
         {
            "productID": 7749138134878224859,
            "purductAmount": 6051214521179394048
         },
         {
            "productID": 7749138134878224859,
            "purductAmount": 6051214521179394048
         }
      ]
   }' --id 1347501538414770956 --token "Autem qui minima."
`, os.Args[0])
}

func purchasesResetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] purchases reset -id INT64 -token STRING

reset deposit
    -id INT64: the user id 
    -token STRING: 

Example:
    %[1]s purchases reset --id 6492829057564523619 --token "Cum laborum maxime dicta aliquam."
`, os.Args[0])
}
