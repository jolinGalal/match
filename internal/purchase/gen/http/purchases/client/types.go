// Code generated by goa v3.5.2, DO NOT EDIT.
//
// purchases HTTP client types
//
// Command:
// $ goa gen github.com/jolinGalal/match/internal/purchase/design

package client

import (
	purchases "github.com/jolinGalal/match/internal/purchase/gen/purchases"
	goa "goa.design/goa/v3/pkg"
)

// DepositRequestBody is the type of the "purchases" service "deposit" endpoint
// HTTP request body.
type DepositRequestBody struct {
	Deposit int `form:"deposit" json:"deposit" xml:"deposit"`
}

// BuyRequestBody is the type of the "purchases" service "buy" endpoint HTTP
// request body.
type BuyRequestBody struct {
	Purchase []*ProductsListRequestBody `form:"purchase" json:"purchase" xml:"purchase"`
}

// BuyResponseBody is the type of the "purchases" service "buy" endpoint HTTP
// response body.
type BuyResponseBody struct {
	ProductsList []*ProductInfoResponseBody `form:"ProductsList,omitempty" json:"ProductsList,omitempty" xml:"ProductsList,omitempty"`
	// total amount
	Total   *int                   `form:"Total,omitempty" json:"Total,omitempty" xml:"Total,omitempty"`
	Changes []*ChangesResponseBody `form:"Changes,omitempty" json:"Changes,omitempty" xml:"Changes,omitempty"`
}

// DepositInvalidDataResponseBody is the type of the "purchases" service
// "deposit" endpoint HTTP response body for the "invalid-data" error.
type DepositInvalidDataResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DepositDublicateDataResponseBody is the type of the "purchases" service
// "deposit" endpoint HTTP response body for the "dublicate-data" error.
type DepositDublicateDataResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BuyInvalidDataResponseBody is the type of the "purchases" service "buy"
// endpoint HTTP response body for the "invalid-data" error.
type BuyInvalidDataResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BuyDublicateDataResponseBody is the type of the "purchases" service "buy"
// endpoint HTTP response body for the "dublicate-data" error.
type BuyDublicateDataResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BuyNotExistResponseBody is the type of the "purchases" service "buy"
// endpoint HTTP response body for the "not-exist" error.
type BuyNotExistResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ResetInvalidDataResponseBody is the type of the "purchases" service "reset"
// endpoint HTTP response body for the "invalid-data" error.
type ResetInvalidDataResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ResetDublicateDataResponseBody is the type of the "purchases" service
// "reset" endpoint HTTP response body for the "dublicate-data" error.
type ResetDublicateDataResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ProductsListRequestBody is used to define fields on request body types.
type ProductsListRequestBody struct {
	// purchase name
	ProductID     int `form:"productID" json:"productID" xml:"productID"`
	PurductAmount int `form:"purductAmount" json:"purductAmount" xml:"purductAmount"`
}

// ProductInfoResponseBody is used to define fields on response body types.
type ProductInfoResponseBody struct {
	// purchase name
	ProductName *string `form:"productName,omitempty" json:"productName,omitempty" xml:"productName,omitempty"`
	// purchase amount
	PurductAmount *int `form:"purductAmount,omitempty" json:"purductAmount,omitempty" xml:"purductAmount,omitempty"`
	// purchase price
	PurductUnitPrice *int `form:"purductUnitPrice,omitempty" json:"purductUnitPrice,omitempty" xml:"purductUnitPrice,omitempty"`
	// purchase price
	PurductTotalPrice *int `form:"purductTotalPrice,omitempty" json:"purductTotalPrice,omitempty" xml:"purductTotalPrice,omitempty"`
}

// ChangesResponseBody is used to define fields on response body types.
type ChangesResponseBody struct {
	// Coin
	Coin *string `form:"Coin,omitempty" json:"Coin,omitempty" xml:"Coin,omitempty"`
	// amount
	Amount *int `form:"Amount,omitempty" json:"Amount,omitempty" xml:"Amount,omitempty"`
}

// NewDepositRequestBody builds the HTTP request body from the payload of the
// "deposit" endpoint of the "purchases" service.
func NewDepositRequestBody(p *purchases.DepositPayload) *DepositRequestBody {
	body := &DepositRequestBody{
		Deposit: p.Deposit,
	}
	return body
}

// NewBuyRequestBody builds the HTTP request body from the payload of the "buy"
// endpoint of the "purchases" service.
func NewBuyRequestBody(p *purchases.BuyPayload) *BuyRequestBody {
	body := &BuyRequestBody{}
	if p.Purchase != nil {
		body.Purchase = make([]*ProductsListRequestBody, len(p.Purchase))
		for i, val := range p.Purchase {
			body.Purchase[i] = marshalPurchasesProductsListToProductsListRequestBody(val)
		}
	}
	return body
}

// NewDepositInvalidData builds a purchases service deposit endpoint
// invalid-data error.
func NewDepositInvalidData(body *DepositInvalidDataResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDepositDublicateData builds a purchases service deposit endpoint
// dublicate-data error.
func NewDepositDublicateData(body *DepositDublicateDataResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBuyPurchesListOK builds a "purchases" service "buy" endpoint result from
// a HTTP "OK" response.
func NewBuyPurchesListOK(body *BuyResponseBody) *purchases.PurchesList {
	v := &purchases.PurchesList{
		Total: *body.Total,
	}
	v.ProductsList = make([]*purchases.ProductInfo, len(body.ProductsList))
	for i, val := range body.ProductsList {
		v.ProductsList[i] = unmarshalProductInfoResponseBodyToPurchasesProductInfo(val)
	}
	v.Changes = make([]*purchases.Changes, len(body.Changes))
	for i, val := range body.Changes {
		v.Changes[i] = unmarshalChangesResponseBodyToPurchasesChanges(val)
	}

	return v
}

// NewBuyInvalidData builds a purchases service buy endpoint invalid-data error.
func NewBuyInvalidData(body *BuyInvalidDataResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBuyDublicateData builds a purchases service buy endpoint dublicate-data
// error.
func NewBuyDublicateData(body *BuyDublicateDataResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewBuyNotExist builds a purchases service buy endpoint not-exist error.
func NewBuyNotExist(body *BuyNotExistResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewResetInvalidData builds a purchases service reset endpoint invalid-data
// error.
func NewResetInvalidData(body *ResetInvalidDataResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewResetDublicateData builds a purchases service reset endpoint
// dublicate-data error.
func NewResetDublicateData(body *ResetDublicateDataResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateBuyResponseBody runs the validations defined on BuyResponseBody
func ValidateBuyResponseBody(body *BuyResponseBody) (err error) {
	if body.ProductsList == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ProductsList", "body"))
	}
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Total", "body"))
	}
	if body.Changes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Changes", "body"))
	}
	for _, e := range body.ProductsList {
		if e != nil {
			if err2 := ValidateProductInfoResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Changes {
		if e != nil {
			if err2 := ValidateChangesResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateDepositInvalidDataResponseBody runs the validations defined on
// deposit_invalid-data_response_body
func ValidateDepositInvalidDataResponseBody(body *DepositInvalidDataResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDepositDublicateDataResponseBody runs the validations defined on
// deposit_dublicate-data_response_body
func ValidateDepositDublicateDataResponseBody(body *DepositDublicateDataResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBuyInvalidDataResponseBody runs the validations defined on
// buy_invalid-data_response_body
func ValidateBuyInvalidDataResponseBody(body *BuyInvalidDataResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBuyDublicateDataResponseBody runs the validations defined on
// buy_dublicate-data_response_body
func ValidateBuyDublicateDataResponseBody(body *BuyDublicateDataResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBuyNotExistResponseBody runs the validations defined on
// buy_not-exist_response_body
func ValidateBuyNotExistResponseBody(body *BuyNotExistResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateResetInvalidDataResponseBody runs the validations defined on
// reset_invalid-data_response_body
func ValidateResetInvalidDataResponseBody(body *ResetInvalidDataResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateResetDublicateDataResponseBody runs the validations defined on
// reset_dublicate-data_response_body
func ValidateResetDublicateDataResponseBody(body *ResetDublicateDataResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateProductsListRequestBody runs the validations defined on
// ProductsListRequestBody
func ValidateProductsListRequestBody(body *ProductsListRequestBody) (err error) {
	if body.PurductAmount < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.purductAmount", body.PurductAmount, 1, true))
	}
	return
}

// ValidateProductInfoResponseBody runs the validations defined on
// ProductInfoResponseBody
func ValidateProductInfoResponseBody(body *ProductInfoResponseBody) (err error) {
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productName", "body"))
	}
	if body.PurductAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("purductAmount", "body"))
	}
	if body.PurductTotalPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("purductTotalPrice", "body"))
	}
	if body.PurductUnitPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("purductUnitPrice", "body"))
	}
	return
}

// ValidateChangesResponseBody runs the validations defined on
// ChangesResponseBody
func ValidateChangesResponseBody(body *ChangesResponseBody) (err error) {
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Amount", "body"))
	}
	if body.Coin == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Coin", "body"))
	}
	return
}
