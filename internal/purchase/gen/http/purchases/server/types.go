// Code generated by goa v3.5.2, DO NOT EDIT.
//
// purchases HTTP server types
//
// Command:
// $ goa gen github.com/jolinGalal/match/internal/purchase/design

package server

import (
	purchases "github.com/jolinGalal/match/internal/purchase/gen/purchases"
	goa "goa.design/goa/v3/pkg"
)

// DepositRequestBody is the type of the "purchases" service "deposit" endpoint
// HTTP request body.
type DepositRequestBody struct {
	Deposit *int `form:"deposit,omitempty" json:"deposit,omitempty" xml:"deposit,omitempty"`
}

// BuyRequestBody is the type of the "purchases" service "buy" endpoint HTTP
// request body.
type BuyRequestBody struct {
	Purchase []*ProductsListRequestBody `form:"purchase,omitempty" json:"purchase,omitempty" xml:"purchase,omitempty"`
}

// BuyResponseBody is the type of the "purchases" service "buy" endpoint HTTP
// response body.
type BuyResponseBody struct {
	ProductsList []*ProductInfoResponseBody `form:"ProductsList" json:"ProductsList" xml:"ProductsList"`
	// total amount
	Total   int                    `form:"Total" json:"Total" xml:"Total"`
	Changes []*ChangesResponseBody `form:"Changes" json:"Changes" xml:"Changes"`
}

// DepositInvalidDataResponseBody is the type of the "purchases" service
// "deposit" endpoint HTTP response body for the "invalid-data" error.
type DepositInvalidDataResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DepositDublicateDataResponseBody is the type of the "purchases" service
// "deposit" endpoint HTTP response body for the "dublicate-data" error.
type DepositDublicateDataResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BuyInvalidDataResponseBody is the type of the "purchases" service "buy"
// endpoint HTTP response body for the "invalid-data" error.
type BuyInvalidDataResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BuyDublicateDataResponseBody is the type of the "purchases" service "buy"
// endpoint HTTP response body for the "dublicate-data" error.
type BuyDublicateDataResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BuyNotExistResponseBody is the type of the "purchases" service "buy"
// endpoint HTTP response body for the "not-exist" error.
type BuyNotExistResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResetInvalidDataResponseBody is the type of the "purchases" service "reset"
// endpoint HTTP response body for the "invalid-data" error.
type ResetInvalidDataResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResetDublicateDataResponseBody is the type of the "purchases" service
// "reset" endpoint HTTP response body for the "dublicate-data" error.
type ResetDublicateDataResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProductInfoResponseBody is used to define fields on response body types.
type ProductInfoResponseBody struct {
	// purchase name
	ProductName string `form:"productName" json:"productName" xml:"productName"`
	// purchase amount
	PurductAmount int `form:"purductAmount" json:"purductAmount" xml:"purductAmount"`
	// purchase price
	PurductUnitPrice int `form:"purductUnitPrice" json:"purductUnitPrice" xml:"purductUnitPrice"`
	// purchase price
	PurductTotalPrice int `form:"purductTotalPrice" json:"purductTotalPrice" xml:"purductTotalPrice"`
}

// ChangesResponseBody is used to define fields on response body types.
type ChangesResponseBody struct {
	// Coin
	Coin string `form:"Coin" json:"Coin" xml:"Coin"`
	// amount
	Amount int `form:"Amount" json:"Amount" xml:"Amount"`
}

// ProductsListRequestBody is used to define fields on request body types.
type ProductsListRequestBody struct {
	// purchase name
	ProductID     *int `form:"productID,omitempty" json:"productID,omitempty" xml:"productID,omitempty"`
	PurductAmount *int `form:"purductAmount,omitempty" json:"purductAmount,omitempty" xml:"purductAmount,omitempty"`
}

// NewBuyResponseBody builds the HTTP response body from the result of the
// "buy" endpoint of the "purchases" service.
func NewBuyResponseBody(res *purchases.PurchesList) *BuyResponseBody {
	body := &BuyResponseBody{
		Total: res.Total,
	}
	if res.ProductsList != nil {
		body.ProductsList = make([]*ProductInfoResponseBody, len(res.ProductsList))
		for i, val := range res.ProductsList {
			body.ProductsList[i] = marshalPurchasesProductInfoToProductInfoResponseBody(val)
		}
	}
	if res.Changes != nil {
		body.Changes = make([]*ChangesResponseBody, len(res.Changes))
		for i, val := range res.Changes {
			body.Changes[i] = marshalPurchasesChangesToChangesResponseBody(val)
		}
	}
	return body
}

// NewDepositInvalidDataResponseBody builds the HTTP response body from the
// result of the "deposit" endpoint of the "purchases" service.
func NewDepositInvalidDataResponseBody(res *goa.ServiceError) *DepositInvalidDataResponseBody {
	body := &DepositInvalidDataResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDepositDublicateDataResponseBody builds the HTTP response body from the
// result of the "deposit" endpoint of the "purchases" service.
func NewDepositDublicateDataResponseBody(res *goa.ServiceError) *DepositDublicateDataResponseBody {
	body := &DepositDublicateDataResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBuyInvalidDataResponseBody builds the HTTP response body from the result
// of the "buy" endpoint of the "purchases" service.
func NewBuyInvalidDataResponseBody(res *goa.ServiceError) *BuyInvalidDataResponseBody {
	body := &BuyInvalidDataResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBuyDublicateDataResponseBody builds the HTTP response body from the
// result of the "buy" endpoint of the "purchases" service.
func NewBuyDublicateDataResponseBody(res *goa.ServiceError) *BuyDublicateDataResponseBody {
	body := &BuyDublicateDataResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBuyNotExistResponseBody builds the HTTP response body from the result of
// the "buy" endpoint of the "purchases" service.
func NewBuyNotExistResponseBody(res *goa.ServiceError) *BuyNotExistResponseBody {
	body := &BuyNotExistResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResetInvalidDataResponseBody builds the HTTP response body from the
// result of the "reset" endpoint of the "purchases" service.
func NewResetInvalidDataResponseBody(res *goa.ServiceError) *ResetInvalidDataResponseBody {
	body := &ResetInvalidDataResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResetDublicateDataResponseBody builds the HTTP response body from the
// result of the "reset" endpoint of the "purchases" service.
func NewResetDublicateDataResponseBody(res *goa.ServiceError) *ResetDublicateDataResponseBody {
	body := &ResetDublicateDataResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDepositPayload builds a purchases service deposit endpoint payload.
func NewDepositPayload(body *DepositRequestBody, id int64, token string) *purchases.DepositPayload {
	v := &purchases.DepositPayload{
		Deposit: *body.Deposit,
	}
	v.ID = id
	v.Token = token

	return v
}

// NewBuyPayload builds a purchases service buy endpoint payload.
func NewBuyPayload(body *BuyRequestBody, id int64, token string) *purchases.BuyPayload {
	v := &purchases.BuyPayload{}
	v.Purchase = make([]*purchases.ProductsList, len(body.Purchase))
	for i, val := range body.Purchase {
		v.Purchase[i] = unmarshalProductsListRequestBodyToPurchasesProductsList(val)
	}
	v.ID = id
	v.Token = token

	return v
}

// NewResetPayload builds a purchases service reset endpoint payload.
func NewResetPayload(id int64, token string) *purchases.ResetPayload {
	v := &purchases.ResetPayload{}
	v.ID = id
	v.Token = token

	return v
}

// ValidateDepositRequestBody runs the validations defined on DepositRequestBody
func ValidateDepositRequestBody(body *DepositRequestBody) (err error) {
	if body.Deposit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deposit", "body"))
	}
	if body.Deposit != nil {
		if !(*body.Deposit == 5 || *body.Deposit == 10 || *body.Deposit == 20 || *body.Deposit == 50 || *body.Deposit == 100) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.deposit", *body.Deposit, []interface{}{5, 10, 20, 50, 100}))
		}
	}
	return
}

// ValidateBuyRequestBody runs the validations defined on BuyRequestBody
func ValidateBuyRequestBody(body *BuyRequestBody) (err error) {
	if body.Purchase == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("purchase", "body"))
	}
	for _, e := range body.Purchase {
		if e != nil {
			if err2 := ValidateProductsListRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateProductsListRequestBody runs the validations defined on
// ProductsListRequestBody
func ValidateProductsListRequestBody(body *ProductsListRequestBody) (err error) {
	if body.ProductID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productID", "body"))
	}
	if body.PurductAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("purductAmount", "body"))
	}
	if body.PurductAmount != nil {
		if *body.PurductAmount < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.purductAmount", *body.PurductAmount, 1, true))
		}
	}
	return
}
