// Code generated by goa v3.5.2, DO NOT EDIT.
//
// purchases service
//
// Command:
// $ goa gen github.com/jolinGalal/match/internal/purchase/design

package purchases

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// The events service exposes endpoints that require valid jwt token.
type Service interface {
	// Create new purchase
	Deposit(context.Context, *DepositPayload) (err error)
	// update existing purchase
	Buy(context.Context, *BuyPayload) (res *PurchesList, err error)
	// reset deposit
	Reset(context.Context, *ResetPayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "purchases"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"deposit", "buy", "reset"}

// DepositPayload is the payload type of the purchases service deposit method.
type DepositPayload struct {
	// JWT used for authentication
	Token string
	// the user id
	ID      int64
	Deposit int
}

// BuyPayload is the payload type of the purchases service buy method.
type BuyPayload struct {
	// JWT used for authentication
	Token string
	// the user id
	ID       int64
	Purchase []*ProductsList
}

// PurchesList is the result type of the purchases service buy method.
type PurchesList struct {
	ProductsList []*ProductInfo
	// total amount
	Total   int
	Changes []*Changes
}

// ResetPayload is the payload type of the purchases service reset method.
type ResetPayload struct {
	// JWT used for authentication
	Token string
	// the user id
	ID int64
}

type ProductsList struct {
	// purchase name
	ProductID     int
	PurductAmount int
}

type ProductInfo struct {
	// purchase name
	ProductName string
	// purchase amount
	PurductAmount int
	// purchase price
	PurductUnitPrice int
	// purchase price
	PurductTotalPrice int
}

type Changes struct {
	// Coin
	Coin string
	// amount
	Amount int
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakePurchaseNotFound builds a goa.ServiceError from an error.
func MakePurchaseNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "purchase-not-found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInvalidData builds a goa.ServiceError from an error.
func MakeInvalidData(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "invalid-data",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeDublicateData builds a goa.ServiceError from an error.
func MakeDublicateData(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "dublicate-data",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotExist builds a goa.ServiceError from an error.
func MakeNotExist(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not-exist",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
