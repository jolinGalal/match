// Code generated by goa v3.5.2, DO NOT EDIT.
//
// purchases endpoints
//
// Command:
// $ goa gen github.com/jolinGalal/match/internal/purchase/design

package purchases

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "purchases" service endpoints.
type Endpoints struct {
	Deposit goa.Endpoint
	Buy     goa.Endpoint
	Reset   goa.Endpoint
}

// NewEndpoints wraps the methods of the "purchases" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Deposit: NewDepositEndpoint(s, a.JWTAuth),
		Buy:     NewBuyEndpoint(s, a.JWTAuth),
		Reset:   NewResetEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "purchases" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Deposit = m(e.Deposit)
	e.Buy = m(e.Buy)
	e.Reset = m(e.Reset)
}

// NewDepositEndpoint returns an endpoint function that calls the method
// "deposit" of service "purchases".
func NewDepositEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DepositPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"buy-purchase", "reset-purchase", "deposit-purchase"},
			RequiredScopes: []string{"deposit-purchase"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Deposit(ctx, p)
	}
}

// NewBuyEndpoint returns an endpoint function that calls the method "buy" of
// service "purchases".
func NewBuyEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*BuyPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"buy-purchase", "reset-purchase", "deposit-purchase"},
			RequiredScopes: []string{"buy-purchase"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Buy(ctx, p)
	}
}

// NewResetEndpoint returns an endpoint function that calls the method "reset"
// of service "purchases".
func NewResetEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ResetPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"buy-purchase", "reset-purchase", "deposit-purchase"},
			RequiredScopes: []string{"reset-purchase"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Reset(ctx, p)
	}
}
