// Code generated by goa v3.5.2, DO NOT EDIT.
//
// match HTTP client CLI support package
//
// Command:
// $ goa gen github.com/jolinGalal/match/internal/product/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	productsc "github.com/jolinGalal/match/internal/product/gen/http/products/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `products (list|create|update|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` products list --sort-direction "asc" --sort-key "CreatedAt" --page-number 5135921346275918269 --page-size 1147368384718197384 --token "Nihil odit fugiat alias placeat."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		productsFlags = flag.NewFlagSet("products", flag.ContinueOnError)

		productsListFlags             = flag.NewFlagSet("list", flag.ExitOnError)
		productsListSortDirectionFlag = productsListFlags.String("sort-direction", "desc", "")
		productsListSortKeyFlag       = productsListFlags.String("sort-key", "CreatedAt", "")
		productsListPageNumberFlag    = productsListFlags.String("page-number", "1", "")
		productsListPageSizeFlag      = productsListFlags.String("page-size", "20", "")
		productsListTokenFlag         = productsListFlags.String("token", "REQUIRED", "")

		productsCreateFlags     = flag.NewFlagSet("create", flag.ExitOnError)
		productsCreateBodyFlag  = productsCreateFlags.String("body", "REQUIRED", "")
		productsCreateTokenFlag = productsCreateFlags.String("token", "REQUIRED", "")

		productsUpdateFlags     = flag.NewFlagSet("update", flag.ExitOnError)
		productsUpdateBodyFlag  = productsUpdateFlags.String("body", "REQUIRED", "")
		productsUpdateIDFlag    = productsUpdateFlags.String("id", "REQUIRED", "the product id to be updated")
		productsUpdateTokenFlag = productsUpdateFlags.String("token", "REQUIRED", "")

		productsDeleteFlags     = flag.NewFlagSet("delete", flag.ExitOnError)
		productsDeleteIDFlag    = productsDeleteFlags.String("id", "REQUIRED", "the product id to be updated")
		productsDeleteTokenFlag = productsDeleteFlags.String("token", "REQUIRED", "")
	)
	productsFlags.Usage = productsUsage
	productsListFlags.Usage = productsListUsage
	productsCreateFlags.Usage = productsCreateUsage
	productsUpdateFlags.Usage = productsUpdateUsage
	productsDeleteFlags.Usage = productsDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "products":
			svcf = productsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "products":
			switch epn {
			case "list":
				epf = productsListFlags

			case "create":
				epf = productsCreateFlags

			case "update":
				epf = productsUpdateFlags

			case "delete":
				epf = productsDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "products":
			c := productsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = productsc.BuildListPayload(*productsListSortDirectionFlag, *productsListSortKeyFlag, *productsListPageNumberFlag, *productsListPageSizeFlag, *productsListTokenFlag)
			case "create":
				endpoint = c.Create()
				data, err = productsc.BuildCreatePayload(*productsCreateBodyFlag, *productsCreateTokenFlag)
			case "update":
				endpoint = c.Update()
				data, err = productsc.BuildUpdatePayload(*productsUpdateBodyFlag, *productsUpdateIDFlag, *productsUpdateTokenFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = productsc.BuildDeletePayload(*productsDeleteIDFlag, *productsDeleteTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// productsUsage displays the usage of the products command and its subcommands.
func productsUsage() {
	fmt.Fprintf(os.Stderr, `The events service exposes endpoints that require valid jwt token.
Usage:
    %[1]s [globalflags] products COMMAND [flags]

COMMAND:
    list: list products
    create: Create new product
    update: update existing product
    delete: delete existing product

Additional help:
    %[1]s products COMMAND --help
`, os.Args[0])
}
func productsListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] products list -sort-direction STRING -sort-key STRING -page-number INT -page-size INT -token STRING

list products
    -sort-direction STRING: 
    -sort-key STRING: 
    -page-number INT: 
    -page-size INT: 
    -token STRING: 

Example:
    %[1]s products list --sort-direction "asc" --sort-key "CreatedAt" --page-number 5135921346275918269 --page-size 1147368384718197384 --token "Nihil odit fugiat alias placeat."
`, os.Args[0])
}

func productsCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] products create -body JSON -token STRING

Create new product
    -body JSON: 
    -token STRING: 

Example:
    %[1]s products create --body '{
      "product": {
         "productAmount": 1988590285111918327,
         "productCost": 8869641590945913594,
         "productName": "Officia nulla mollitia."
      }
   }' --token "Amet earum inventore dicta est cum."
`, os.Args[0])
}

func productsUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] products update -body JSON -id INT64 -token STRING

update existing product
    -body JSON: 
    -id INT64: the product id to be updated
    -token STRING: 

Example:
    %[1]s products update --body '{
      "product": {
         "productAmount": 1988590285111918327,
         "productCost": 8869641590945913594,
         "productName": "Officia nulla mollitia."
      }
   }' --id 5558318220991198845 --token "Aliquam eum."
`, os.Args[0])
}

func productsDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] products delete -id INT64 -token STRING

delete existing product
    -id INT64: the product id to be updated
    -token STRING: 

Example:
    %[1]s products delete --id 1338768029778771658 --token "Repudiandae sed."
`, os.Args[0])
}
