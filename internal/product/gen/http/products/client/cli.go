// Code generated by goa v3.5.2, DO NOT EDIT.
//
// products HTTP client CLI support package
//
// Command:
// $ goa gen github.com/jolinGalal/match/internal/product/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	products "github.com/jolinGalal/match/internal/product/gen/products"
	goa "goa.design/goa/v3/pkg"
)

// BuildListPayload builds the payload for the products list endpoint from CLI
// flags.
func BuildListPayload(productsListSortDirection string, productsListSortKey string, productsListPageNumber string, productsListPageSize string, productsListToken string) (*products.ListPayload, error) {
	var err error
	var sortDirection string
	{
		if productsListSortDirection != "" {
			sortDirection = productsListSortDirection
			if !(sortDirection == "asc" || sortDirection == "desc") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("sortDirection", sortDirection, []interface{}{"asc", "desc"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var sortKey string
	{
		if productsListSortKey != "" {
			sortKey = productsListSortKey
			if !(sortKey == "CreatedAt" || sortKey == "ProductID" || sortKey == "ProductName") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("sortKey", sortKey, []interface{}{"CreatedAt", "ProductID", "ProductName"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var pageNumber int
	{
		if productsListPageNumber != "" {
			var v int64
			v, err = strconv.ParseInt(productsListPageNumber, 10, 64)
			pageNumber = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for pageNumber, must be INT")
			}
		}
	}
	var pageSize int
	{
		if productsListPageSize != "" {
			var v int64
			v, err = strconv.ParseInt(productsListPageSize, 10, 64)
			pageSize = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for pageSize, must be INT")
			}
		}
	}
	var token string
	{
		token = productsListToken
	}
	v := &products.ListPayload{}
	v.SortDirection = sortDirection
	v.SortKey = sortKey
	v.PageNumber = pageNumber
	v.PageSize = pageSize
	v.Token = token

	return v, nil
}

// BuildCreatePayload builds the payload for the products create endpoint from
// CLI flags.
func BuildCreatePayload(productsCreateBody string, productsCreateToken string) (*products.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(productsCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"product\": {\n         \"productAmount\": 1988590285111918327,\n         \"productCost\": 8869641590945913594,\n         \"productName\": \"Officia nulla mollitia.\"\n      }\n   }'")
		}
		if body.Product == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("product", "body"))
		}
		if body.Product != nil {
			if err2 := ValidateProductPayloadRequestBody(body.Product); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = productsCreateToken
	}
	v := &products.CreatePayload{}
	if body.Product != nil {
		v.Product = marshalProductPayloadRequestBodyToProductsProductPayload(body.Product)
	}
	v.Token = token

	return v, nil
}

// BuildUpdatePayload builds the payload for the products update endpoint from
// CLI flags.
func BuildUpdatePayload(productsUpdateBody string, productsUpdateID string, productsUpdateToken string) (*products.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(productsUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"product\": {\n         \"productAmount\": 1988590285111918327,\n         \"productCost\": 8869641590945913594,\n         \"productName\": \"Officia nulla mollitia.\"\n      }\n   }'")
		}
		if body.Product == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("product", "body"))
		}
		if body.Product != nil {
			if err2 := ValidateProductPayloadRequestBody(body.Product); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id int64
	{
		id, err = strconv.ParseInt(productsUpdateID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT64")
		}
	}
	var token string
	{
		token = productsUpdateToken
	}
	v := &products.UpdatePayload{}
	if body.Product != nil {
		v.Product = marshalProductPayloadRequestBodyToProductsProductPayload(body.Product)
	}
	v.ID = id
	v.Token = token

	return v, nil
}

// BuildDeletePayload builds the payload for the products delete endpoint from
// CLI flags.
func BuildDeletePayload(productsDeleteID string, productsDeleteToken string) (*products.DeletePayload, error) {
	var err error
	var id int64
	{
		id, err = strconv.ParseInt(productsDeleteID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT64")
		}
	}
	var token string
	{
		token = productsDeleteToken
	}
	v := &products.DeletePayload{}
	v.ID = id
	v.Token = token

	return v, nil
}
