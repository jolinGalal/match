// Code generated by goa v3.5.2, DO NOT EDIT.
//
// products service
//
// Command:
// $ goa gen github.com/jolinGalal/match/internal/product/design

package products

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// The events service exposes endpoints that require valid jwt token.
type Service interface {
	// list products
	List(context.Context, *ListPayload) (res *ListResult, err error)
	// Create new product
	Create(context.Context, *CreatePayload) (err error)
	// update existing product
	Update(context.Context, *UpdatePayload) (err error)
	// delete existing product
	Delete(context.Context, *DeletePayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "products"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"list", "create", "update", "delete"}

// ListPayload is the payload type of the products service list method.
type ListPayload struct {
	// JWT used for authentication
	Token         string
	SortKey       string
	SortDirection string
	PageNumber    int
	PageSize      int
}

// ListResult is the result type of the products service list method.
type ListResult struct {
	// events
	Products []*ListproductResp
	// pagination
	Pagination *Pagination
}

// CreatePayload is the payload type of the products service create method.
type CreatePayload struct {
	// JWT used for authentication
	Token   string
	Product *ProductPayload
}

// UpdatePayload is the payload type of the products service update method.
type UpdatePayload struct {
	// JWT used for authentication
	Token string
	// the product id to be updated
	ID      int64
	Product *ProductPayload
}

// DeletePayload is the payload type of the products service delete method.
type DeletePayload struct {
	// JWT used for authentication
	Token string
	// the product id to be updated
	ID int64
}

type ListproductResp struct {
	// product Id
	ProductID string
	// product name
	ProductName string
	// product name
	ProductAmount int
	// product role
	ProductCost int
	// product role
	SellerID int
}

type Pagination struct {
	// The current page
	CurrentPage *int
	// Max number of records per page
	PageSize *int
	// Total pages
	TotalPages *int
	// Total records count
	TotalCount *int64
}

type ProductPayload struct {
	// product name
	ProductName   string
	ProductAmount int
	ProductCost   int
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeProductNotFound builds a goa.ServiceError from an error.
func MakeProductNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "product-not-found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInvalidData builds a goa.ServiceError from an error.
func MakeInvalidData(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "invalid-data",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeDublicateData builds a goa.ServiceError from an error.
func MakeDublicateData(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "dublicate-data",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotExist builds a goa.ServiceError from an error.
func MakeNotExist(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not-exist",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
