// Code generated by goa v3.5.2, DO NOT EDIT.
//
// users HTTP client types
//
// Command:
// $ goa gen github.com/jolinGalal/match/internal/user/design

package client

import (
	users "github.com/jolinGalal/match/internal/user/gen/users"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "users" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	User *UserPayloadRequestBody `form:"user" json:"user" xml:"user"`
}

// UpdateRequestBody is the type of the "users" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	User *UserPayloadRequestBody `form:"user" json:"user" xml:"user"`
}

// LoginRequestBody is the type of the "users" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// user name
	UserName string `form:"UserName" json:"UserName" xml:"UserName"`
	// user password
	USerPassword string `form:"USerPassword" json:"USerPassword" xml:"USerPassword"`
}

// ListResponseBody is the type of the "users" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	// events
	Users []*ListUserRespResponseBody `form:"users,omitempty" json:"users,omitempty" xml:"users,omitempty"`
	// pagination
	Pagination *PaginationResponseBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// LoginResponseBody is the type of the "users" service "login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	// user token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	// user ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListUnauthorizedResponseBody is the type of the "users" service "list"
// endpoint HTTP response body for the "unauthorized" error.
type ListUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateInvalidDataResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "invalid-data" error.
type CreateInvalidDataResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateDublicateDataResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "dublicate-data" error.
type CreateDublicateDataResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateInvalidDataResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "invalid-data" error.
type UpdateInvalidDataResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateDublicateDataResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "dublicate-data" error.
type UpdateDublicateDataResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateNotExistResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "not-exist" error.
type UpdateNotExistResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteNotExistResponseBody is the type of the "users" service "delete"
// endpoint HTTP response body for the "not-exist" error.
type DeleteNotExistResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// LoginNotExistResponseBody is the type of the "users" service "login"
// endpoint HTTP response body for the "not-exist" error.
type LoginNotExistResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListUserRespResponseBody is used to define fields on response body types.
type ListUserRespResponseBody struct {
	// user Id
	UserID *string `form:"UserID,omitempty" json:"UserID,omitempty" xml:"UserID,omitempty"`
	// user name
	UserName *string `form:"UserName,omitempty" json:"UserName,omitempty" xml:"UserName,omitempty"`
	// user name
	UserDeposit *int `form:"UserDeposit,omitempty" json:"UserDeposit,omitempty" xml:"UserDeposit,omitempty"`
	// user role
	UserRole *string `form:"UserRole,omitempty" json:"UserRole,omitempty" xml:"UserRole,omitempty"`
}

// PaginationResponseBody is used to define fields on response body types.
type PaginationResponseBody struct {
	// The current page
	CurrentPage *int `form:"current_page,omitempty" json:"current_page,omitempty" xml:"current_page,omitempty"`
	// Max number of records per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty" xml:"page_size,omitempty"`
	// Total pages
	TotalPages *int `form:"total_pages,omitempty" json:"total_pages,omitempty" xml:"total_pages,omitempty"`
	// Total records count
	TotalCount *int64 `form:"total_count,omitempty" json:"total_count,omitempty" xml:"total_count,omitempty"`
}

// UserPayloadRequestBody is used to define fields on request body types.
type UserPayloadRequestBody struct {
	// user name
	UserName string `form:"UserName" json:"UserName" xml:"UserName"`
	// user passowrd
	UserPassword string `form:"UserPassword" json:"UserPassword" xml:"UserPassword"`
	UserRole     string `form:"UserRole" json:"UserRole" xml:"UserRole"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "users" service.
func NewCreateRequestBody(p *users.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{}
	if p.User != nil {
		body.User = marshalUsersUserPayloadToUserPayloadRequestBody(p.User)
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "users" service.
func NewUpdateRequestBody(p *users.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{}
	if p.User != nil {
		body.User = marshalUsersUserPayloadToUserPayloadRequestBody(p.User)
	}
	return body
}

// NewLoginRequestBody builds the HTTP request body from the payload of the
// "login" endpoint of the "users" service.
func NewLoginRequestBody(p *users.LoginPayload) *LoginRequestBody {
	body := &LoginRequestBody{
		UserName:     p.UserName,
		USerPassword: p.USerPassword,
	}
	return body
}

// NewListResultOK builds a "users" service "list" endpoint result from a HTTP
// "OK" response.
func NewListResultOK(body *ListResponseBody) *users.ListResult {
	v := &users.ListResult{}
	v.Users = make([]*users.ListUserResp, len(body.Users))
	for i, val := range body.Users {
		v.Users[i] = unmarshalListUserRespResponseBodyToUsersListUserResp(val)
	}
	v.Pagination = unmarshalPaginationResponseBodyToUsersPagination(body.Pagination)

	return v
}

// NewListUnauthorized builds a users service list endpoint unauthorized error.
func NewListUnauthorized(body *ListUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateInvalidData builds a users service create endpoint invalid-data
// error.
func NewCreateInvalidData(body *CreateInvalidDataResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateDublicateData builds a users service create endpoint dublicate-data
// error.
func NewCreateDublicateData(body *CreateDublicateDataResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateInvalidData builds a users service update endpoint invalid-data
// error.
func NewUpdateInvalidData(body *UpdateInvalidDataResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateDublicateData builds a users service update endpoint dublicate-data
// error.
func NewUpdateDublicateData(body *UpdateDublicateDataResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateNotExist builds a users service update endpoint not-exist error.
func NewUpdateNotExist(body *UpdateNotExistResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteNotExist builds a users service delete endpoint not-exist error.
func NewDeleteNotExist(body *DeleteNotExistResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewLoginResOK builds a "users" service "login" endpoint result from a HTTP
// "OK" response.
func NewLoginResOK(body *LoginResponseBody) *users.LoginRes {
	v := &users.LoginRes{
		Token: *body.Token,
		ID:    *body.ID,
	}

	return v
}

// NewLoginNotExist builds a users service login endpoint not-exist error.
func NewLoginNotExist(body *LoginNotExistResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateListResponseBody runs the validations defined on ListResponseBody
func ValidateListResponseBody(body *ListResponseBody) (err error) {
	if body.Users == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("users", "body"))
	}
	if body.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
	}
	for _, e := range body.Users {
		if e != nil {
			if err2 := ValidateListUserRespResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateLoginResponseBody runs the validations defined on LoginResponseBody
func ValidateLoginResponseBody(body *LoginResponseBody) (err error) {
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateListUnauthorizedResponseBody runs the validations defined on
// list_unauthorized_response_body
func ValidateListUnauthorizedResponseBody(body *ListUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateInvalidDataResponseBody runs the validations defined on
// create_invalid-data_response_body
func ValidateCreateInvalidDataResponseBody(body *CreateInvalidDataResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateDublicateDataResponseBody runs the validations defined on
// create_dublicate-data_response_body
func ValidateCreateDublicateDataResponseBody(body *CreateDublicateDataResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateInvalidDataResponseBody runs the validations defined on
// update_invalid-data_response_body
func ValidateUpdateInvalidDataResponseBody(body *UpdateInvalidDataResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateDublicateDataResponseBody runs the validations defined on
// update_dublicate-data_response_body
func ValidateUpdateDublicateDataResponseBody(body *UpdateDublicateDataResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateNotExistResponseBody runs the validations defined on
// update_not-exist_response_body
func ValidateUpdateNotExistResponseBody(body *UpdateNotExistResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteNotExistResponseBody runs the validations defined on
// delete_not-exist_response_body
func ValidateDeleteNotExistResponseBody(body *DeleteNotExistResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateLoginNotExistResponseBody runs the validations defined on
// login_not-exist_response_body
func ValidateLoginNotExistResponseBody(body *LoginNotExistResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListUserRespResponseBody runs the validations defined on
// ListUserRespResponseBody
func ValidateListUserRespResponseBody(body *ListUserRespResponseBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("UserID", "body"))
	}
	if body.UserName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("UserName", "body"))
	}
	if body.UserDeposit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("UserDeposit", "body"))
	}
	if body.UserRole == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("UserRole", "body"))
	}
	return
}

// ValidateUserPayloadRequestBody runs the validations defined on
// UserPayloadRequestBody
func ValidateUserPayloadRequestBody(body *UserPayloadRequestBody) (err error) {
	if !(body.UserRole == "seller" || body.UserRole == "buyer") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.UserRole", body.UserRole, []interface{}{"seller", "buyer"}))
	}
	return
}
