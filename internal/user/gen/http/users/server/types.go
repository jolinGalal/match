// Code generated by goa v3.5.2, DO NOT EDIT.
//
// users HTTP server types
//
// Command:
// $ goa gen github.com/jolinGalal/match/internal/user/design

package server

import (
	users "github.com/jolinGalal/match/internal/user/gen/users"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "users" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	User *UserPayloadRequestBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// UpdateRequestBody is the type of the "users" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	User *UserPayloadRequestBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// LoginRequestBody is the type of the "users" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// user name
	UserName *string `form:"UserName,omitempty" json:"UserName,omitempty" xml:"UserName,omitempty"`
	// user password
	USerPassword *string `form:"USerPassword,omitempty" json:"USerPassword,omitempty" xml:"USerPassword,omitempty"`
}

// ListResponseBody is the type of the "users" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	// events
	Users []*ListUserRespResponseBody `form:"users" json:"users" xml:"users"`
	// pagination
	Pagination *PaginationResponseBody `form:"pagination" json:"pagination" xml:"pagination"`
}

// LoginResponseBody is the type of the "users" service "login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	// user token
	Token string `form:"token" json:"token" xml:"token"`
	// user ID
	ID int `form:"id" json:"id" xml:"id"`
}

// ListUnauthorizedResponseBody is the type of the "users" service "list"
// endpoint HTTP response body for the "unauthorized" error.
type ListUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateInvalidDataResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "invalid-data" error.
type CreateInvalidDataResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateDublicateDataResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "dublicate-data" error.
type CreateDublicateDataResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateInvalidDataResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "invalid-data" error.
type UpdateInvalidDataResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateDublicateDataResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "dublicate-data" error.
type UpdateDublicateDataResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateNotExistResponseBody is the type of the "users" service "update"
// endpoint HTTP response body for the "not-exist" error.
type UpdateNotExistResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotExistResponseBody is the type of the "users" service "delete"
// endpoint HTTP response body for the "not-exist" error.
type DeleteNotExistResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginNotExistResponseBody is the type of the "users" service "login"
// endpoint HTTP response body for the "not-exist" error.
type LoginNotExistResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListUserRespResponseBody is used to define fields on response body types.
type ListUserRespResponseBody struct {
	// user Id
	UserID string `form:"UserID" json:"UserID" xml:"UserID"`
	// user name
	UserName string `form:"UserName" json:"UserName" xml:"UserName"`
	// user name
	UserDeposit int `form:"UserDeposit" json:"UserDeposit" xml:"UserDeposit"`
	// user role
	UserRole string `form:"UserRole" json:"UserRole" xml:"UserRole"`
}

// PaginationResponseBody is used to define fields on response body types.
type PaginationResponseBody struct {
	// The current page
	CurrentPage *int `form:"current_page,omitempty" json:"current_page,omitempty" xml:"current_page,omitempty"`
	// Max number of records per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty" xml:"page_size,omitempty"`
	// Total pages
	TotalPages *int `form:"total_pages,omitempty" json:"total_pages,omitempty" xml:"total_pages,omitempty"`
	// Total records count
	TotalCount *int64 `form:"total_count,omitempty" json:"total_count,omitempty" xml:"total_count,omitempty"`
}

// UserPayloadRequestBody is used to define fields on request body types.
type UserPayloadRequestBody struct {
	// user name
	UserName *string `form:"UserName,omitempty" json:"UserName,omitempty" xml:"UserName,omitempty"`
	// user passowrd
	UserPassword *string `form:"UserPassword,omitempty" json:"UserPassword,omitempty" xml:"UserPassword,omitempty"`
	UserRole     *string `form:"UserRole,omitempty" json:"UserRole,omitempty" xml:"UserRole,omitempty"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "users" service.
func NewListResponseBody(res *users.ListResult) *ListResponseBody {
	body := &ListResponseBody{}
	if res.Users != nil {
		body.Users = make([]*ListUserRespResponseBody, len(res.Users))
		for i, val := range res.Users {
			body.Users[i] = marshalUsersListUserRespToListUserRespResponseBody(val)
		}
	}
	if res.Pagination != nil {
		body.Pagination = marshalUsersPaginationToPaginationResponseBody(res.Pagination)
	}
	return body
}

// NewLoginResponseBody builds the HTTP response body from the result of the
// "login" endpoint of the "users" service.
func NewLoginResponseBody(res *users.LoginRes) *LoginResponseBody {
	body := &LoginResponseBody{
		Token: res.Token,
		ID:    res.ID,
	}
	return body
}

// NewListUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "users" service.
func NewListUnauthorizedResponseBody(res *goa.ServiceError) *ListUnauthorizedResponseBody {
	body := &ListUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateInvalidDataResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "users" service.
func NewCreateInvalidDataResponseBody(res *goa.ServiceError) *CreateInvalidDataResponseBody {
	body := &CreateInvalidDataResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateDublicateDataResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "users" service.
func NewCreateDublicateDataResponseBody(res *goa.ServiceError) *CreateDublicateDataResponseBody {
	body := &CreateDublicateDataResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateInvalidDataResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "users" service.
func NewUpdateInvalidDataResponseBody(res *goa.ServiceError) *UpdateInvalidDataResponseBody {
	body := &UpdateInvalidDataResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateDublicateDataResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "users" service.
func NewUpdateDublicateDataResponseBody(res *goa.ServiceError) *UpdateDublicateDataResponseBody {
	body := &UpdateDublicateDataResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateNotExistResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "users" service.
func NewUpdateNotExistResponseBody(res *goa.ServiceError) *UpdateNotExistResponseBody {
	body := &UpdateNotExistResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotExistResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "users" service.
func NewDeleteNotExistResponseBody(res *goa.ServiceError) *DeleteNotExistResponseBody {
	body := &DeleteNotExistResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginNotExistResponseBody builds the HTTP response body from the result
// of the "login" endpoint of the "users" service.
func NewLoginNotExistResponseBody(res *goa.ServiceError) *LoginNotExistResponseBody {
	body := &LoginNotExistResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPayload builds a users service list endpoint payload.
func NewListPayload(sortDirection string, sortKey string, pageNumber int, pageSize int, token string) *users.ListPayload {
	v := &users.ListPayload{}
	v.SortDirection = sortDirection
	v.SortKey = sortKey
	v.PageNumber = pageNumber
	v.PageSize = pageSize
	v.Token = token

	return v
}

// NewCreatePayload builds a users service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody) *users.CreatePayload {
	v := &users.CreatePayload{}
	v.User = unmarshalUserPayloadRequestBodyToUsersUserPayload(body.User)

	return v
}

// NewUpdatePayload builds a users service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, id int64, token string) *users.UpdatePayload {
	v := &users.UpdatePayload{}
	v.User = unmarshalUserPayloadRequestBodyToUsersUserPayload(body.User)
	v.ID = id
	v.Token = token

	return v
}

// NewDeletePayload builds a users service delete endpoint payload.
func NewDeletePayload(id int64, token string) *users.DeletePayload {
	v := &users.DeletePayload{}
	v.ID = id
	v.Token = token

	return v
}

// NewLoginPayload builds a users service login endpoint payload.
func NewLoginPayload(body *LoginRequestBody) *users.LoginPayload {
	v := &users.LoginPayload{
		UserName:     *body.UserName,
		USerPassword: *body.USerPassword,
	}

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	if body.User != nil {
		if err2 := ValidateUserPayloadRequestBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	if body.User != nil {
		if err2 := ValidateUserPayloadRequestBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateLoginRequestBody runs the validations defined on LoginRequestBody
func ValidateLoginRequestBody(body *LoginRequestBody) (err error) {
	if body.UserName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("UserName", "body"))
	}
	if body.USerPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("USerPassword", "body"))
	}
	return
}

// ValidateUserPayloadRequestBody runs the validations defined on
// UserPayloadRequestBody
func ValidateUserPayloadRequestBody(body *UserPayloadRequestBody) (err error) {
	if body.UserName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("UserName", "body"))
	}
	if body.UserPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("UserPassword", "body"))
	}
	if body.UserRole == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("UserRole", "body"))
	}
	if body.UserRole != nil {
		if !(*body.UserRole == "seller" || *body.UserRole == "buyer") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.UserRole", *body.UserRole, []interface{}{"seller", "buyer"}))
		}
	}
	return
}
