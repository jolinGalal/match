// Code generated by goa v3.5.2, DO NOT EDIT.
//
// users service
//
// Command:
// $ goa gen github.com/jolinGalal/match/internal/user/design

package users

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// The events service exposes endpoints that require valid jwt token.
type Service interface {
	// list users
	List(context.Context, *ListPayload) (res *ListResult, err error)
	// Create new user
	Create(context.Context, *CreatePayload) (err error)
	// update existing user
	Update(context.Context, *UpdatePayload) (err error)
	// delete existing user
	Delete(context.Context, *DeletePayload) (err error)
	// delete existing user
	Login(context.Context, *LoginPayload) (res *LoginRes, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "users"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"list", "create", "update", "delete", "login"}

// ListPayload is the payload type of the users service list method.
type ListPayload struct {
	// JWT used for authentication
	Token         string
	SortKey       string
	SortDirection string
	PageNumber    int
	PageSize      int
}

// ListResult is the result type of the users service list method.
type ListResult struct {
	// events
	Users []*ListUserResp
	// pagination
	Pagination *Pagination
}

// CreatePayload is the payload type of the users service create method.
type CreatePayload struct {
	User *UserPayload
}

// UpdatePayload is the payload type of the users service update method.
type UpdatePayload struct {
	// JWT used for authentication
	Token string
	// the user id to be updated
	ID   int64
	User *UserPayload
}

// DeletePayload is the payload type of the users service delete method.
type DeletePayload struct {
	// JWT used for authentication
	Token string
	// the user id to be updated
	ID int64
}

// LoginPayload is the payload type of the users service login method.
type LoginPayload struct {
	// user name
	UserName string
	// user password
	USerPassword string
}

// LoginRes is the result type of the users service login method.
type LoginRes struct {
	// user token
	Token string
	// user ID
	ID int
}

type ListUserResp struct {
	// user Id
	UserID string
	// user name
	UserName string
	// user name
	UserDeposit int
	// user role
	UserRole string
}

type Pagination struct {
	// The current page
	CurrentPage *int
	// Max number of records per page
	PageSize *int
	// Total pages
	TotalPages *int
	// Total records count
	TotalCount *int64
}

type UserPayload struct {
	// user name
	UserName string
	// user passowrd
	UserPassword string
	UserRole     string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeUserNotFound builds a goa.ServiceError from an error.
func MakeUserNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "user-not-found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInvalidData builds a goa.ServiceError from an error.
func MakeInvalidData(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "invalid-data",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeDublicateData builds a goa.ServiceError from an error.
func MakeDublicateData(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "dublicate-data",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotExist builds a goa.ServiceError from an error.
func MakeNotExist(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not-exist",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
